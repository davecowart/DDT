#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DDT.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db192")]
	public partial class DDTDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertACBonuse(ACBonuse instance);
    partial void UpdateACBonuse(ACBonuse instance);
    partial void DeleteACBonuse(ACBonuse instance);
    partial void InsertReflexBonuse(ReflexBonuse instance);
    partial void UpdateReflexBonuse(ReflexBonuse instance);
    partial void DeleteReflexBonuse(ReflexBonuse instance);
    partial void InsertWillBonuse(WillBonuse instance);
    partial void UpdateWillBonuse(WillBonuse instance);
    partial void DeleteWillBonuse(WillBonuse instance);
    partial void InsertEffect(Effect instance);
    partial void UpdateEffect(Effect instance);
    partial void DeleteEffect(Effect instance);
    partial void InsertFortBonuse(FortBonuse instance);
    partial void UpdateFortBonuse(FortBonuse instance);
    partial void DeleteFortBonuse(FortBonuse instance);
    partial void InsertPower(Power instance);
    partial void UpdatePower(Power instance);
    partial void DeletePower(Power instance);
    partial void InsertCharacter(Character instance);
    partial void UpdateCharacter(Character instance);
    partial void DeleteCharacter(Character instance);
    #endregion
		
		public DDTDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["db192ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DDTDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DDTDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DDTDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DDTDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ACBonuse> ACBonuses
		{
			get
			{
				return this.GetTable<ACBonuse>();
			}
		}
		
		public System.Data.Linq.Table<ReflexBonuse> ReflexBonuses
		{
			get
			{
				return this.GetTable<ReflexBonuse>();
			}
		}
		
		public System.Data.Linq.Table<WillBonuse> WillBonuses
		{
			get
			{
				return this.GetTable<WillBonuse>();
			}
		}
		
		public System.Data.Linq.Table<Effect> Effects
		{
			get
			{
				return this.GetTable<Effect>();
			}
		}
		
		public System.Data.Linq.Table<FortBonuse> FortBonuses
		{
			get
			{
				return this.GetTable<FortBonuse>();
			}
		}
		
		public System.Data.Linq.Table<Power> Powers
		{
			get
			{
				return this.GetTable<Power>();
			}
		}
		
		public System.Data.Linq.Table<Character> Characters
		{
			get
			{
				return this.GetTable<Character>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACBonuses")]
	public partial class ACBonuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CharacterId;
		
		private int _BonusAmount;
		
		private int _ExpirationKey;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCharacterIdChanging(int value);
    partial void OnCharacterIdChanged();
    partial void OnBonusAmountChanging(int value);
    partial void OnBonusAmountChanged();
    partial void OnExpirationKeyChanging(int value);
    partial void OnExpirationKeyChanged();
    #endregion
		
		public ACBonuse()
		{
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterId", DbType="Int NOT NULL")]
		public int CharacterId
		{
			get
			{
				return this._CharacterId;
			}
			set
			{
				if ((this._CharacterId != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIdChanging(value);
					this.SendPropertyChanging();
					this._CharacterId = value;
					this.SendPropertyChanged("CharacterId");
					this.OnCharacterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BonusAmount", DbType="Int NOT NULL")]
		public int BonusAmount
		{
			get
			{
				return this._BonusAmount;
			}
			set
			{
				if ((this._BonusAmount != value))
				{
					this.OnBonusAmountChanging(value);
					this.SendPropertyChanging();
					this._BonusAmount = value;
					this.SendPropertyChanged("BonusAmount");
					this.OnBonusAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationKey", DbType="Int NOT NULL")]
		public int ExpirationKey
		{
			get
			{
				return this._ExpirationKey;
			}
			set
			{
				if ((this._ExpirationKey != value))
				{
					this.OnExpirationKeyChanging(value);
					this.SendPropertyChanging();
					this._ExpirationKey = value;
					this.SendPropertyChanged("ExpirationKey");
					this.OnExpirationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_ACBonuse", Storage="_Character", ThisKey="CharacterId", OtherKey="Id", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.ACBonuses.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.ACBonuses.Add(this);
						this._CharacterId = value.Id;
					}
					else
					{
						this._CharacterId = default(int);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReflexBonuses")]
	public partial class ReflexBonuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CharacterId;
		
		private int _BonusAmount;
		
		private int _ExpirationKey;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCharacterIdChanging(int value);
    partial void OnCharacterIdChanged();
    partial void OnBonusAmountChanging(int value);
    partial void OnBonusAmountChanged();
    partial void OnExpirationKeyChanging(int value);
    partial void OnExpirationKeyChanged();
    #endregion
		
		public ReflexBonuse()
		{
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterId", DbType="Int NOT NULL")]
		public int CharacterId
		{
			get
			{
				return this._CharacterId;
			}
			set
			{
				if ((this._CharacterId != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIdChanging(value);
					this.SendPropertyChanging();
					this._CharacterId = value;
					this.SendPropertyChanged("CharacterId");
					this.OnCharacterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BonusAmount", DbType="Int NOT NULL")]
		public int BonusAmount
		{
			get
			{
				return this._BonusAmount;
			}
			set
			{
				if ((this._BonusAmount != value))
				{
					this.OnBonusAmountChanging(value);
					this.SendPropertyChanging();
					this._BonusAmount = value;
					this.SendPropertyChanged("BonusAmount");
					this.OnBonusAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationKey", DbType="Int NOT NULL")]
		public int ExpirationKey
		{
			get
			{
				return this._ExpirationKey;
			}
			set
			{
				if ((this._ExpirationKey != value))
				{
					this.OnExpirationKeyChanging(value);
					this.SendPropertyChanging();
					this._ExpirationKey = value;
					this.SendPropertyChanged("ExpirationKey");
					this.OnExpirationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_ReflexBonuse", Storage="_Character", ThisKey="CharacterId", OtherKey="Id", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.ReflexBonuses.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.ReflexBonuses.Add(this);
						this._CharacterId = value.Id;
					}
					else
					{
						this._CharacterId = default(int);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WillBonuses")]
	public partial class WillBonuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CharacterId;
		
		private int _BonusAmount;
		
		private int _ExpirationKey;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCharacterIdChanging(int value);
    partial void OnCharacterIdChanged();
    partial void OnBonusAmountChanging(int value);
    partial void OnBonusAmountChanged();
    partial void OnExpirationKeyChanging(int value);
    partial void OnExpirationKeyChanged();
    #endregion
		
		public WillBonuse()
		{
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterId", DbType="Int NOT NULL")]
		public int CharacterId
		{
			get
			{
				return this._CharacterId;
			}
			set
			{
				if ((this._CharacterId != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIdChanging(value);
					this.SendPropertyChanging();
					this._CharacterId = value;
					this.SendPropertyChanged("CharacterId");
					this.OnCharacterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BonusAmount", DbType="Int NOT NULL")]
		public int BonusAmount
		{
			get
			{
				return this._BonusAmount;
			}
			set
			{
				if ((this._BonusAmount != value))
				{
					this.OnBonusAmountChanging(value);
					this.SendPropertyChanging();
					this._BonusAmount = value;
					this.SendPropertyChanged("BonusAmount");
					this.OnBonusAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationKey", DbType="Int NOT NULL")]
		public int ExpirationKey
		{
			get
			{
				return this._ExpirationKey;
			}
			set
			{
				if ((this._ExpirationKey != value))
				{
					this.OnExpirationKeyChanging(value);
					this.SendPropertyChanging();
					this._ExpirationKey = value;
					this.SendPropertyChanged("ExpirationKey");
					this.OnExpirationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_WillBonuse", Storage="_Character", ThisKey="CharacterId", OtherKey="Id", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.WillBonuses.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.WillBonuses.Add(this);
						this._CharacterId = value.Id;
					}
					else
					{
						this._CharacterId = default(int);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Effects")]
	public partial class Effect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CharacterId;
		
		private string _Name;
		
		private int _ExpirationKey;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCharacterIdChanging(int value);
    partial void OnCharacterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExpirationKeyChanging(int value);
    partial void OnExpirationKeyChanged();
    #endregion
		
		public Effect()
		{
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterId", DbType="Int NOT NULL")]
		public int CharacterId
		{
			get
			{
				return this._CharacterId;
			}
			set
			{
				if ((this._CharacterId != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIdChanging(value);
					this.SendPropertyChanging();
					this._CharacterId = value;
					this.SendPropertyChanged("CharacterId");
					this.OnCharacterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationKey", DbType="Int NOT NULL")]
		public int ExpirationKey
		{
			get
			{
				return this._ExpirationKey;
			}
			set
			{
				if ((this._ExpirationKey != value))
				{
					this.OnExpirationKeyChanging(value);
					this.SendPropertyChanging();
					this._ExpirationKey = value;
					this.SendPropertyChanged("ExpirationKey");
					this.OnExpirationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_Effect", Storage="_Character", ThisKey="CharacterId", OtherKey="Id", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.Effects.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.Effects.Add(this);
						this._CharacterId = value.Id;
					}
					else
					{
						this._CharacterId = default(int);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FortBonuses")]
	public partial class FortBonuse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CharacterId;
		
		private int _BonusAmount;
		
		private int _ExpirationKey;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCharacterIdChanging(int value);
    partial void OnCharacterIdChanged();
    partial void OnBonusAmountChanging(int value);
    partial void OnBonusAmountChanged();
    partial void OnExpirationKeyChanging(int value);
    partial void OnExpirationKeyChanged();
    #endregion
		
		public FortBonuse()
		{
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterId", DbType="Int NOT NULL")]
		public int CharacterId
		{
			get
			{
				return this._CharacterId;
			}
			set
			{
				if ((this._CharacterId != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIdChanging(value);
					this.SendPropertyChanging();
					this._CharacterId = value;
					this.SendPropertyChanged("CharacterId");
					this.OnCharacterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BonusAmount", DbType="Int NOT NULL")]
		public int BonusAmount
		{
			get
			{
				return this._BonusAmount;
			}
			set
			{
				if ((this._BonusAmount != value))
				{
					this.OnBonusAmountChanging(value);
					this.SendPropertyChanging();
					this._BonusAmount = value;
					this.SendPropertyChanged("BonusAmount");
					this.OnBonusAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationKey", DbType="Int NOT NULL")]
		public int ExpirationKey
		{
			get
			{
				return this._ExpirationKey;
			}
			set
			{
				if ((this._ExpirationKey != value))
				{
					this.OnExpirationKeyChanging(value);
					this.SendPropertyChanging();
					this._ExpirationKey = value;
					this.SendPropertyChanged("ExpirationKey");
					this.OnExpirationKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_FortBonuse", Storage="_Character", ThisKey="CharacterId", OtherKey="Id", IsForeignKey=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.FortBonuses.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.FortBonuses.Add(this);
						this._CharacterId = value.Id;
					}
					else
					{
						this._CharacterId = default(int);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Powers")]
	public partial class Power : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CharacterId;
		
		private string _Name;
		
		private string _Attack;
		
		private string _Damage;
		
		private string _Effect;
		
		private string _Hit;
		
		private string _Miss;
		
		private string _Range;
		
		private int _Cooldown;
		
		private int _ActionType;
		
		private bool _Available;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCharacterIdChanging(int value);
    partial void OnCharacterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAttackChanging(string value);
    partial void OnAttackChanged();
    partial void OnDamageChanging(string value);
    partial void OnDamageChanged();
    partial void OnEffectChanging(string value);
    partial void OnEffectChanged();
    partial void OnHitChanging(string value);
    partial void OnHitChanged();
    partial void OnMissChanging(string value);
    partial void OnMissChanged();
    partial void OnRangeChanging(string value);
    partial void OnRangeChanged();
    partial void OnCooldownChanging(int value);
    partial void OnCooldownChanged();
    partial void OnActionTypeChanging(int value);
    partial void OnActionTypeChanged();
    partial void OnAvailableChanging(bool value);
    partial void OnAvailableChanged();
    #endregion
		
		public Power()
		{
			this._Character = default(EntityRef<Character>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CharacterId", DbType="Int NOT NULL")]
		public int CharacterId
		{
			get
			{
				return this._CharacterId;
			}
			set
			{
				if ((this._CharacterId != value))
				{
					if (this._Character.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCharacterIdChanging(value);
					this.SendPropertyChanging();
					this._CharacterId = value;
					this.SendPropertyChanged("CharacterId");
					this.OnCharacterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attack", DbType="VarChar(50)")]
		public string Attack
		{
			get
			{
				return this._Attack;
			}
			set
			{
				if ((this._Attack != value))
				{
					this.OnAttackChanging(value);
					this.SendPropertyChanging();
					this._Attack = value;
					this.SendPropertyChanged("Attack");
					this.OnAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="VarChar(50)")]
		public string Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				if ((this._Damage != value))
				{
					this.OnDamageChanging(value);
					this.SendPropertyChanging();
					this._Damage = value;
					this.SendPropertyChanged("Damage");
					this.OnDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Effect", DbType="VarChar(50)")]
		public string Effect
		{
			get
			{
				return this._Effect;
			}
			set
			{
				if ((this._Effect != value))
				{
					this.OnEffectChanging(value);
					this.SendPropertyChanging();
					this._Effect = value;
					this.SendPropertyChanged("Effect");
					this.OnEffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hit", DbType="VarChar(50)")]
		public string Hit
		{
			get
			{
				return this._Hit;
			}
			set
			{
				if ((this._Hit != value))
				{
					this.OnHitChanging(value);
					this.SendPropertyChanging();
					this._Hit = value;
					this.SendPropertyChanged("Hit");
					this.OnHitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Miss", DbType="VarChar(50)")]
		public string Miss
		{
			get
			{
				return this._Miss;
			}
			set
			{
				if ((this._Miss != value))
				{
					this.OnMissChanging(value);
					this.SendPropertyChanging();
					this._Miss = value;
					this.SendPropertyChanged("Miss");
					this.OnMissChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Range", DbType="VarChar(20)")]
		public string Range
		{
			get
			{
				return this._Range;
			}
			set
			{
				if ((this._Range != value))
				{
					this.OnRangeChanging(value);
					this.SendPropertyChanging();
					this._Range = value;
					this.SendPropertyChanged("Range");
					this.OnRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cooldown", DbType="Int NOT NULL")]
		public int Cooldown
		{
			get
			{
				return this._Cooldown;
			}
			set
			{
				if ((this._Cooldown != value))
				{
					this.OnCooldownChanging(value);
					this.SendPropertyChanging();
					this._Cooldown = value;
					this.SendPropertyChanged("Cooldown");
					this.OnCooldownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionType", DbType="Int NOT NULL")]
		public int ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Bit NOT NULL")]
		public bool Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_Power", Storage="_Character", ThisKey="CharacterId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
		public Character Character
		{
			get
			{
				return this._Character.Entity;
			}
			set
			{
				Character previousValue = this._Character.Entity;
				if (((previousValue != value) 
							|| (this._Character.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Character.Entity = null;
						previousValue.Powers.Remove(this);
					}
					this._Character.Entity = value;
					if ((value != null))
					{
						value.Powers.Add(this);
						this._CharacterId = value.Id;
					}
					else
					{
						this._CharacterId = default(int);
					}
					this.SendPropertyChanged("Character");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Characters")]
	public partial class Character : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Race;
		
		private string _Class;
		
		private int _Level;
		
		private int _HPMax;
		
		private int _HPTemp;
		
		private int _HPCurrent;
		
		private int _SurgesDaily;
		
		private int _SurgesUsed;
		
		private int _Strength;
		
		private int _Constitution;
		
		private int _Dexterity;
		
		private int _Intellect;
		
		private int _Wisdom;
		
		private int _Charisma;
		
		private int _AC;
		
		private int _Fortitude;
		
		private int _Reflex;
		
		private int _Will;
		
		private int _ActionPoints;
		
		private int _DeathSaves;
		
		private int _Acrobatics;
		
		private int _Arcana;
		
		private int _Athletics;
		
		private int _Bluff;
		
		private int _Diplomacy;
		
		private int _Dungeoneering;
		
		private int _Endurance;
		
		private int _Heal;
		
		private int _History;
		
		private int _Insight;
		
		private int _Intimidate;
		
		private int _Nature;
		
		private int _Perception;
		
		private int _Religion;
		
		private int _Stealth;
		
		private int _Streetwise;
		
		private int _Thievery;
		
		private int _MeleeBasicAttack;
		
		private int _RangedBasicAttack;
		
		private int _UnarmedMeleeAttack;
		
		private int _UnarmedRangedAttack;
		
		private string _MeleeBasicDamage;
		
		private string _RangedBasicDamage;
		
		private string _UnarmedMeleeDamage;
		
		private string _UnarmedRangedDamage;
		
		private EntitySet<ACBonuse> _ACBonuses;
		
		private EntitySet<ReflexBonuse> _ReflexBonuses;
		
		private EntitySet<WillBonuse> _WillBonuses;
		
		private EntitySet<Effect> _Effects;
		
		private EntitySet<FortBonuse> _FortBonuses;
		
		private EntitySet<Power> _Powers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceChanging(string value);
    partial void OnRaceChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnHPMaxChanging(int value);
    partial void OnHPMaxChanged();
    partial void OnHPTempChanging(int value);
    partial void OnHPTempChanged();
    partial void OnHPCurrentChanging(int value);
    partial void OnHPCurrentChanged();
    partial void OnSurgesDailyChanging(int value);
    partial void OnSurgesDailyChanged();
    partial void OnSurgesUsedChanging(int value);
    partial void OnSurgesUsedChanged();
    partial void OnStrengthChanging(int value);
    partial void OnStrengthChanged();
    partial void OnConstitutionChanging(int value);
    partial void OnConstitutionChanged();
    partial void OnDexterityChanging(int value);
    partial void OnDexterityChanged();
    partial void OnIntellectChanging(int value);
    partial void OnIntellectChanged();
    partial void OnWisdomChanging(int value);
    partial void OnWisdomChanged();
    partial void OnCharismaChanging(int value);
    partial void OnCharismaChanged();
    partial void OnACChanging(int value);
    partial void OnACChanged();
    partial void OnFortitudeChanging(int value);
    partial void OnFortitudeChanged();
    partial void OnReflexChanging(int value);
    partial void OnReflexChanged();
    partial void OnWillChanging(int value);
    partial void OnWillChanged();
    partial void OnActionPointsChanging(int value);
    partial void OnActionPointsChanged();
    partial void OnDeathSavesChanging(int value);
    partial void OnDeathSavesChanged();
    partial void OnAcrobaticsChanging(int value);
    partial void OnAcrobaticsChanged();
    partial void OnArcanaChanging(int value);
    partial void OnArcanaChanged();
    partial void OnAthleticsChanging(int value);
    partial void OnAthleticsChanged();
    partial void OnBluffChanging(int value);
    partial void OnBluffChanged();
    partial void OnDiplomacyChanging(int value);
    partial void OnDiplomacyChanged();
    partial void OnDungeoneeringChanging(int value);
    partial void OnDungeoneeringChanged();
    partial void OnEnduranceChanging(int value);
    partial void OnEnduranceChanged();
    partial void OnHealChanging(int value);
    partial void OnHealChanged();
    partial void OnHistoryChanging(int value);
    partial void OnHistoryChanged();
    partial void OnInsightChanging(int value);
    partial void OnInsightChanged();
    partial void OnIntimidateChanging(int value);
    partial void OnIntimidateChanged();
    partial void OnNatureChanging(int value);
    partial void OnNatureChanged();
    partial void OnPerceptionChanging(int value);
    partial void OnPerceptionChanged();
    partial void OnReligionChanging(int value);
    partial void OnReligionChanged();
    partial void OnStealthChanging(int value);
    partial void OnStealthChanged();
    partial void OnStreetwiseChanging(int value);
    partial void OnStreetwiseChanged();
    partial void OnThieveryChanging(int value);
    partial void OnThieveryChanged();
    partial void OnMeleeBasicAttackChanging(int value);
    partial void OnMeleeBasicAttackChanged();
    partial void OnRangedBasicAttackChanging(int value);
    partial void OnRangedBasicAttackChanged();
    partial void OnUnarmedMeleeAttackChanging(int value);
    partial void OnUnarmedMeleeAttackChanged();
    partial void OnUnarmedRangedAttackChanging(int value);
    partial void OnUnarmedRangedAttackChanged();
    partial void OnMeleeBasicDamageChanging(string value);
    partial void OnMeleeBasicDamageChanged();
    partial void OnRangedBasicDamageChanging(string value);
    partial void OnRangedBasicDamageChanged();
    partial void OnUnarmedMeleeDamageChanging(string value);
    partial void OnUnarmedMeleeDamageChanged();
    partial void OnUnarmedRangedDamageChanging(string value);
    partial void OnUnarmedRangedDamageChanged();
    #endregion
		
		public Character()
		{
			this._ACBonuses = new EntitySet<ACBonuse>(new Action<ACBonuse>(this.attach_ACBonuses), new Action<ACBonuse>(this.detach_ACBonuses));
			this._ReflexBonuses = new EntitySet<ReflexBonuse>(new Action<ReflexBonuse>(this.attach_ReflexBonuses), new Action<ReflexBonuse>(this.detach_ReflexBonuses));
			this._WillBonuses = new EntitySet<WillBonuse>(new Action<WillBonuse>(this.attach_WillBonuses), new Action<WillBonuse>(this.detach_WillBonuses));
			this._Effects = new EntitySet<Effect>(new Action<Effect>(this.attach_Effects), new Action<Effect>(this.detach_Effects));
			this._FortBonuses = new EntitySet<FortBonuse>(new Action<FortBonuse>(this.attach_FortBonuses), new Action<FortBonuse>(this.detach_FortBonuses));
			this._Powers = new EntitySet<Power>(new Action<Power>(this.attach_Powers), new Action<Power>(this.detach_Powers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Race", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Race
		{
			get
			{
				return this._Race;
			}
			set
			{
				if ((this._Race != value))
				{
					this.OnRaceChanging(value);
					this.SendPropertyChanging();
					this._Race = value;
					this.SendPropertyChanged("Race");
					this.OnRaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HPMax", DbType="Int NOT NULL")]
		public int HPMax
		{
			get
			{
				return this._HPMax;
			}
			set
			{
				if ((this._HPMax != value))
				{
					this.OnHPMaxChanging(value);
					this.SendPropertyChanging();
					this._HPMax = value;
					this.SendPropertyChanged("HPMax");
					this.OnHPMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HPTemp", DbType="Int NOT NULL")]
		public int HPTemp
		{
			get
			{
				return this._HPTemp;
			}
			set
			{
				if ((this._HPTemp != value))
				{
					this.OnHPTempChanging(value);
					this.SendPropertyChanging();
					this._HPTemp = value;
					this.SendPropertyChanged("HPTemp");
					this.OnHPTempChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HPCurrent", DbType="Int NOT NULL")]
		public int HPCurrent
		{
			get
			{
				return this._HPCurrent;
			}
			set
			{
				if ((this._HPCurrent != value))
				{
					this.OnHPCurrentChanging(value);
					this.SendPropertyChanging();
					this._HPCurrent = value;
					this.SendPropertyChanged("HPCurrent");
					this.OnHPCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgesDaily", DbType="Int NOT NULL")]
		public int SurgesDaily
		{
			get
			{
				return this._SurgesDaily;
			}
			set
			{
				if ((this._SurgesDaily != value))
				{
					this.OnSurgesDailyChanging(value);
					this.SendPropertyChanging();
					this._SurgesDaily = value;
					this.SendPropertyChanged("SurgesDaily");
					this.OnSurgesDailyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurgesUsed", DbType="Int NOT NULL")]
		public int SurgesUsed
		{
			get
			{
				return this._SurgesUsed;
			}
			set
			{
				if ((this._SurgesUsed != value))
				{
					this.OnSurgesUsedChanging(value);
					this.SendPropertyChanging();
					this._SurgesUsed = value;
					this.SendPropertyChanged("SurgesUsed");
					this.OnSurgesUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Strength", DbType="Int NOT NULL")]
		public int Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Constitution", DbType="Int NOT NULL")]
		public int Constitution
		{
			get
			{
				return this._Constitution;
			}
			set
			{
				if ((this._Constitution != value))
				{
					this.OnConstitutionChanging(value);
					this.SendPropertyChanging();
					this._Constitution = value;
					this.SendPropertyChanged("Constitution");
					this.OnConstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dexterity", DbType="Int NOT NULL")]
		public int Dexterity
		{
			get
			{
				return this._Dexterity;
			}
			set
			{
				if ((this._Dexterity != value))
				{
					this.OnDexterityChanging(value);
					this.SendPropertyChanging();
					this._Dexterity = value;
					this.SendPropertyChanged("Dexterity");
					this.OnDexterityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intellect", DbType="Int NOT NULL")]
		public int Intellect
		{
			get
			{
				return this._Intellect;
			}
			set
			{
				if ((this._Intellect != value))
				{
					this.OnIntellectChanging(value);
					this.SendPropertyChanging();
					this._Intellect = value;
					this.SendPropertyChanged("Intellect");
					this.OnIntellectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wisdom", DbType="Int NOT NULL")]
		public int Wisdom
		{
			get
			{
				return this._Wisdom;
			}
			set
			{
				if ((this._Wisdom != value))
				{
					this.OnWisdomChanging(value);
					this.SendPropertyChanging();
					this._Wisdom = value;
					this.SendPropertyChanged("Wisdom");
					this.OnWisdomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Charisma", DbType="Int NOT NULL")]
		public int Charisma
		{
			get
			{
				return this._Charisma;
			}
			set
			{
				if ((this._Charisma != value))
				{
					this.OnCharismaChanging(value);
					this.SendPropertyChanging();
					this._Charisma = value;
					this.SendPropertyChanged("Charisma");
					this.OnCharismaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AC", DbType="Int NOT NULL")]
		public int AC
		{
			get
			{
				return this._AC;
			}
			set
			{
				if ((this._AC != value))
				{
					this.OnACChanging(value);
					this.SendPropertyChanging();
					this._AC = value;
					this.SendPropertyChanged("AC");
					this.OnACChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fortitude", DbType="Int NOT NULL")]
		public int Fortitude
		{
			get
			{
				return this._Fortitude;
			}
			set
			{
				if ((this._Fortitude != value))
				{
					this.OnFortitudeChanging(value);
					this.SendPropertyChanging();
					this._Fortitude = value;
					this.SendPropertyChanged("Fortitude");
					this.OnFortitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reflex", DbType="Int NOT NULL")]
		public int Reflex
		{
			get
			{
				return this._Reflex;
			}
			set
			{
				if ((this._Reflex != value))
				{
					this.OnReflexChanging(value);
					this.SendPropertyChanging();
					this._Reflex = value;
					this.SendPropertyChanged("Reflex");
					this.OnReflexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Will", DbType="Int NOT NULL")]
		public int Will
		{
			get
			{
				return this._Will;
			}
			set
			{
				if ((this._Will != value))
				{
					this.OnWillChanging(value);
					this.SendPropertyChanging();
					this._Will = value;
					this.SendPropertyChanged("Will");
					this.OnWillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionPoints", DbType="Int NOT NULL")]
		public int ActionPoints
		{
			get
			{
				return this._ActionPoints;
			}
			set
			{
				if ((this._ActionPoints != value))
				{
					this.OnActionPointsChanging(value);
					this.SendPropertyChanging();
					this._ActionPoints = value;
					this.SendPropertyChanged("ActionPoints");
					this.OnActionPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeathSaves", DbType="Int NOT NULL")]
		public int DeathSaves
		{
			get
			{
				return this._DeathSaves;
			}
			set
			{
				if ((this._DeathSaves != value))
				{
					this.OnDeathSavesChanging(value);
					this.SendPropertyChanging();
					this._DeathSaves = value;
					this.SendPropertyChanged("DeathSaves");
					this.OnDeathSavesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Acrobatics", DbType="Int NOT NULL")]
		public int Acrobatics
		{
			get
			{
				return this._Acrobatics;
			}
			set
			{
				if ((this._Acrobatics != value))
				{
					this.OnAcrobaticsChanging(value);
					this.SendPropertyChanging();
					this._Acrobatics = value;
					this.SendPropertyChanged("Acrobatics");
					this.OnAcrobaticsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arcana", DbType="Int NOT NULL")]
		public int Arcana
		{
			get
			{
				return this._Arcana;
			}
			set
			{
				if ((this._Arcana != value))
				{
					this.OnArcanaChanging(value);
					this.SendPropertyChanging();
					this._Arcana = value;
					this.SendPropertyChanged("Arcana");
					this.OnArcanaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Athletics", DbType="Int NOT NULL")]
		public int Athletics
		{
			get
			{
				return this._Athletics;
			}
			set
			{
				if ((this._Athletics != value))
				{
					this.OnAthleticsChanging(value);
					this.SendPropertyChanging();
					this._Athletics = value;
					this.SendPropertyChanged("Athletics");
					this.OnAthleticsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bluff", DbType="Int NOT NULL")]
		public int Bluff
		{
			get
			{
				return this._Bluff;
			}
			set
			{
				if ((this._Bluff != value))
				{
					this.OnBluffChanging(value);
					this.SendPropertyChanging();
					this._Bluff = value;
					this.SendPropertyChanged("Bluff");
					this.OnBluffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diplomacy", DbType="Int NOT NULL")]
		public int Diplomacy
		{
			get
			{
				return this._Diplomacy;
			}
			set
			{
				if ((this._Diplomacy != value))
				{
					this.OnDiplomacyChanging(value);
					this.SendPropertyChanging();
					this._Diplomacy = value;
					this.SendPropertyChanged("Diplomacy");
					this.OnDiplomacyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dungeoneering", DbType="Int NOT NULL")]
		public int Dungeoneering
		{
			get
			{
				return this._Dungeoneering;
			}
			set
			{
				if ((this._Dungeoneering != value))
				{
					this.OnDungeoneeringChanging(value);
					this.SendPropertyChanging();
					this._Dungeoneering = value;
					this.SendPropertyChanged("Dungeoneering");
					this.OnDungeoneeringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Endurance", DbType="Int NOT NULL")]
		public int Endurance
		{
			get
			{
				return this._Endurance;
			}
			set
			{
				if ((this._Endurance != value))
				{
					this.OnEnduranceChanging(value);
					this.SendPropertyChanging();
					this._Endurance = value;
					this.SendPropertyChanged("Endurance");
					this.OnEnduranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Heal", DbType="Int NOT NULL")]
		public int Heal
		{
			get
			{
				return this._Heal;
			}
			set
			{
				if ((this._Heal != value))
				{
					this.OnHealChanging(value);
					this.SendPropertyChanging();
					this._Heal = value;
					this.SendPropertyChanged("Heal");
					this.OnHealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_History", DbType="Int NOT NULL")]
		public int History
		{
			get
			{
				return this._History;
			}
			set
			{
				if ((this._History != value))
				{
					this.OnHistoryChanging(value);
					this.SendPropertyChanging();
					this._History = value;
					this.SendPropertyChanged("History");
					this.OnHistoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Insight", DbType="Int NOT NULL")]
		public int Insight
		{
			get
			{
				return this._Insight;
			}
			set
			{
				if ((this._Insight != value))
				{
					this.OnInsightChanging(value);
					this.SendPropertyChanging();
					this._Insight = value;
					this.SendPropertyChanged("Insight");
					this.OnInsightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intimidate", DbType="Int NOT NULL")]
		public int Intimidate
		{
			get
			{
				return this._Intimidate;
			}
			set
			{
				if ((this._Intimidate != value))
				{
					this.OnIntimidateChanging(value);
					this.SendPropertyChanging();
					this._Intimidate = value;
					this.SendPropertyChanged("Intimidate");
					this.OnIntimidateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nature", DbType="Int NOT NULL")]
		public int Nature
		{
			get
			{
				return this._Nature;
			}
			set
			{
				if ((this._Nature != value))
				{
					this.OnNatureChanging(value);
					this.SendPropertyChanging();
					this._Nature = value;
					this.SendPropertyChanged("Nature");
					this.OnNatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Perception", DbType="Int NOT NULL")]
		public int Perception
		{
			get
			{
				return this._Perception;
			}
			set
			{
				if ((this._Perception != value))
				{
					this.OnPerceptionChanging(value);
					this.SendPropertyChanging();
					this._Perception = value;
					this.SendPropertyChanged("Perception");
					this.OnPerceptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Religion", DbType="Int NOT NULL")]
		public int Religion
		{
			get
			{
				return this._Religion;
			}
			set
			{
				if ((this._Religion != value))
				{
					this.OnReligionChanging(value);
					this.SendPropertyChanging();
					this._Religion = value;
					this.SendPropertyChanged("Religion");
					this.OnReligionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stealth", DbType="Int NOT NULL")]
		public int Stealth
		{
			get
			{
				return this._Stealth;
			}
			set
			{
				if ((this._Stealth != value))
				{
					this.OnStealthChanging(value);
					this.SendPropertyChanging();
					this._Stealth = value;
					this.SendPropertyChanged("Stealth");
					this.OnStealthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Streetwise", DbType="Int NOT NULL")]
		public int Streetwise
		{
			get
			{
				return this._Streetwise;
			}
			set
			{
				if ((this._Streetwise != value))
				{
					this.OnStreetwiseChanging(value);
					this.SendPropertyChanging();
					this._Streetwise = value;
					this.SendPropertyChanged("Streetwise");
					this.OnStreetwiseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thievery", DbType="Int NOT NULL")]
		public int Thievery
		{
			get
			{
				return this._Thievery;
			}
			set
			{
				if ((this._Thievery != value))
				{
					this.OnThieveryChanging(value);
					this.SendPropertyChanging();
					this._Thievery = value;
					this.SendPropertyChanged("Thievery");
					this.OnThieveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeleeBasicAttack", DbType="Int NOT NULL")]
		public int MeleeBasicAttack
		{
			get
			{
				return this._MeleeBasicAttack;
			}
			set
			{
				if ((this._MeleeBasicAttack != value))
				{
					this.OnMeleeBasicAttackChanging(value);
					this.SendPropertyChanging();
					this._MeleeBasicAttack = value;
					this.SendPropertyChanged("MeleeBasicAttack");
					this.OnMeleeBasicAttackChanged();
				}
			}
		}
<<<<<<< HEAD
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Powers")]
	public partial class Power : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CharacterId;
		
		private string _Name;
		
		private string _Attack;
		
		private string _Damage;
		
		private string _Effect;
		
		private string _Hit;
		
		private string _Miss;
		
		private string _Range;
		
		private int _Cooldown;
		
		private int _ActionType;
		
		private bool _Available;
		
		private EntityRef<Character> _Character;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCharacterIdChanging(int value);
    partial void OnCharacterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAttackChanging(string value);
    partial void OnAttackChanged();
    partial void OnDamageChanging(string value);
    partial void OnDamageChanged();
    partial void OnEffectChanging(string value);
    partial void OnEffectChanged();
    partial void OnHitChanging(string value);
    partial void OnHitChanged();
    partial void OnMissChanging(string value);
    partial void OnMissChanged();
    partial void OnRangeChanging(string value);
    partial void OnRangeChanged();
    partial void OnCooldownChanging(int value);
    partial void OnCooldownChanged();
    partial void OnActionTypeChanging(int value);
    partial void OnActionTypeChanged();
    partial void OnAvailableChanging(bool value);
    partial void OnAvailableChanged();
    #endregion
		
		public Power()
=======
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangedBasicAttack", DbType="Int NOT NULL")]
		public int RangedBasicAttack
>>>>>>> 6718ebf5be1800fa4fa9a0bb371740c65dd322d2
		{
			get
			{
				return this._RangedBasicAttack;
			}
			set
			{
				if ((this._RangedBasicAttack != value))
				{
					this.OnRangedBasicAttackChanging(value);
					this.SendPropertyChanging();
					this._RangedBasicAttack = value;
					this.SendPropertyChanged("RangedBasicAttack");
					this.OnRangedBasicAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnarmedMeleeAttack", DbType="Int NOT NULL")]
		public int UnarmedMeleeAttack
		{
			get
			{
				return this._UnarmedMeleeAttack;
			}
			set
			{
				if ((this._UnarmedMeleeAttack != value))
				{
					this.OnUnarmedMeleeAttackChanging(value);
					this.SendPropertyChanging();
					this._UnarmedMeleeAttack = value;
					this.SendPropertyChanged("UnarmedMeleeAttack");
					this.OnUnarmedMeleeAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnarmedRangedAttack", DbType="Int NOT NULL")]
		public int UnarmedRangedAttack
		{
			get
			{
				return this._UnarmedRangedAttack;
			}
			set
			{
				if ((this._UnarmedRangedAttack != value))
				{
					this.OnUnarmedRangedAttackChanging(value);
					this.SendPropertyChanging();
					this._UnarmedRangedAttack = value;
					this.SendPropertyChanged("UnarmedRangedAttack");
					this.OnUnarmedRangedAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeleeBasicDamage", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MeleeBasicDamage
		{
			get
			{
				return this._MeleeBasicDamage;
			}
			set
			{
				if ((this._MeleeBasicDamage != value))
				{
					this.OnMeleeBasicDamageChanging(value);
					this.SendPropertyChanging();
					this._MeleeBasicDamage = value;
					this.SendPropertyChanged("MeleeBasicDamage");
					this.OnMeleeBasicDamageChanged();
				}
			}
		}
		
<<<<<<< HEAD
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attack", DbType="VarChar(50)")]
		public string Attack
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangedBasicDamage", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RangedBasicDamage
>>>>>>> 6718ebf5be1800fa4fa9a0bb371740c65dd322d2
		{
			get
			{
				return this._RangedBasicDamage;
			}
			set
			{
				if ((this._RangedBasicDamage != value))
				{
					this.OnRangedBasicDamageChanging(value);
					this.SendPropertyChanging();
					this._RangedBasicDamage = value;
					this.SendPropertyChanged("RangedBasicDamage");
					this.OnRangedBasicDamageChanged();
				}
			}
		}
		
<<<<<<< HEAD
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="VarChar(50)")]
		public string Damage
=======
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnarmedMeleeDamage", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UnarmedMeleeDamage
>>>>>>> 6718ebf5be1800fa4fa9a0bb371740c65dd322d2
		{
			get
			{
				return this._UnarmedMeleeDamage;
			}
			set
			{
				if ((this._UnarmedMeleeDamage != value))
				{
					this.OnUnarmedMeleeDamageChanging(value);
					this.SendPropertyChanging();
					this._UnarmedMeleeDamage = value;
					this.SendPropertyChanged("UnarmedMeleeDamage");
					this.OnUnarmedMeleeDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnarmedRangedDamage", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UnarmedRangedDamage
		{
			get
			{
				return this._UnarmedRangedDamage;
			}
			set
			{
				if ((this._UnarmedRangedDamage != value))
				{
					this.OnUnarmedRangedDamageChanging(value);
					this.SendPropertyChanging();
					this._UnarmedRangedDamage = value;
					this.SendPropertyChanged("UnarmedRangedDamage");
					this.OnUnarmedRangedDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_ACBonuse", Storage="_ACBonuses", ThisKey="Id", OtherKey="CharacterId")]
		public EntitySet<ACBonuse> ACBonuses
		{
			get
			{
				return this._ACBonuses;
			}
			set
			{
				this._ACBonuses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_ReflexBonuse", Storage="_ReflexBonuses", ThisKey="Id", OtherKey="CharacterId")]
		public EntitySet<ReflexBonuse> ReflexBonuses
		{
			get
			{
				return this._ReflexBonuses;
			}
			set
			{
				this._ReflexBonuses.Assign(value);
			}
		}
		
<<<<<<< HEAD
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Range", DbType="VarChar(20)")]
		public string Range
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_WillBonuse", Storage="_WillBonuses", ThisKey="Id", OtherKey="CharacterId")]
		public EntitySet<WillBonuse> WillBonuses
>>>>>>> 6718ebf5be1800fa4fa9a0bb371740c65dd322d2
		{
			get
			{
				return this._WillBonuses;
			}
			set
			{
				this._WillBonuses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_Effect", Storage="_Effects", ThisKey="Id", OtherKey="CharacterId")]
		public EntitySet<Effect> Effects
		{
			get
			{
				return this._Effects;
			}
			set
			{
				this._Effects.Assign(value);
			}
		}
		
<<<<<<< HEAD
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionType", DbType="Int NOT NULL")]
		public int ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Bit NOT NULL")]
		public bool Available
=======
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_FortBonuse", Storage="_FortBonuses", ThisKey="Id", OtherKey="CharacterId")]
		public EntitySet<FortBonuse> FortBonuses
>>>>>>> 6718ebf5be1800fa4fa9a0bb371740c65dd322d2
		{
			get
			{
				return this._FortBonuses;
			}
			set
			{
				this._FortBonuses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Character_Power", Storage="_Powers", ThisKey="Id", OtherKey="CharacterId")]
		public EntitySet<Power> Powers
		{
			get
			{
				return this._Powers;
			}
			set
			{
				this._Powers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACBonuses(ACBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_ACBonuses(ACBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
		
		private void attach_ReflexBonuses(ReflexBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_ReflexBonuses(ReflexBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
		
		private void attach_WillBonuses(WillBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_WillBonuses(WillBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
		
		private void attach_Effects(Effect entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_Effects(Effect entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
		
		private void attach_FortBonuses(FortBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_FortBonuses(FortBonuse entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
		
		private void attach_Powers(Power entity)
		{
			this.SendPropertyChanging();
			entity.Character = this;
		}
		
		private void detach_Powers(Power entity)
		{
			this.SendPropertyChanging();
			entity.Character = null;
		}
	}
}
#pragma warning restore 1591
